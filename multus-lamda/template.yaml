AWSTemplateFormatVersion: "2010-09-09"

Description: Deploy Lambda Function For Attaching Secondary ENIs to ASG instances

Parameters:
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: The VPC of the worker instances
  MultusSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Subnets To Use In Creating Secondary ENIs
  SourceDestCheckEnable:
    Type: String
    Description: Enable or Disable src-dst checking
    Default: "true"  
  useIPsFromStartOfSubnet: 
    AllowedValues: 
       -  true
       -  false
    Default: True
    Type: String
    Description: "False -> use DHCP allocation (use it when using subnet CIDR reservation), True -> Allocate IPs from begining of the subnet(Lambda does this handling)" 
  InterfaceTags:
    Type: String
    Description: "(Optional) Any additional tags to be applied on the multus intf (Key value pair, separated by comma ex: cnf=abc01,type=5g)" 
  AutoscalingGroupName:
    Type: String
    Description: Unique identifier for the Node Group.
  Attach2ndENILambdaS3Bucket:
    Type: String
    Description: Specify S3 Bucket(directory) where you locate Lambda function (Attach2ndENI function)
    Default: ""
  Attach2ndENILambdaS3Key:
    Type: String
    Description: Specify S3 Key(filename) of your Lambda Function (Attach2ndENI)
    Default: "lambda_function.zip"

Resources:
  MultusSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group For Multus interfaces
      VpcId: !Ref VpcId

  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: MultusSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref MultusSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref MultusSecurityGroup
      ToPort: 65535
# LifeCycleHook for AutoScalingGroup (NodeGroup)
## Ec2Ins LcHook is for ENI Attach Lambda Call
  LchookEc2InsNg1:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref AutoscalingGroupName
      LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"
      DefaultResult: "ABANDON"
      HeartbeatTimeout: "300"
## Ec2Term LcHook is for Auto Drainer
  LchookEc2TermNg1:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref AutoscalingGroupName
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
      DefaultResult: "CONTINUE"
      HeartbeatTimeout: "300"

# Lambda Creation
  RoleLambdaAttach2ndEniCfn:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
  PolicyLambdaAttach2ndEniCfn:
    Type: "AWS::IAM::Policy"
    DependsOn: RoleLambdaAttach2ndEniCfn
    Properties:
      PolicyName: LambdaAttach2ndEniCfn
      Roles: [
          !Ref RoleLambdaAttach2ndEniCfn
        ]
      PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeInstances",
                "ec2:DetachNetworkInterface",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:DescribeSubnets",
                "autoscaling:CompleteLifecycleAction",
                "ec2:DeleteTags",
                "ec2:DescribeNetworkInterfaces",
                "ec2:ModifyInstanceAttribute",
                "ec2:CreateTags",
                "ec2:DeleteNetworkInterface",
                "ec2:AttachNetworkInterface",
                "autoscaling:DescribeAutoScalingGroups",
                "ec2:TerminateInstances"
              ]
              Resource: "*"
            - Effect: Allow
              Action: [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ]
              Resource: "arn:aws:logs:*:*:*"
            - Effect: Allow
              Action: "logs:CreateLogGroup"
              Resource: "arn:aws:logs:*:*:*"

  LambdaAttach2ndENI:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: "python3.8"
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt RoleLambdaAttach2ndEniCfn.Arn
      Code:
        S3Bucket: !Ref Attach2ndENILambdaS3Bucket
        S3Key: !Ref Attach2ndENILambdaS3Key
      Timeout: "60"
      Environment:
        Variables:
          SubnetIds: !Join [ ",", !Ref MultusSubnets ]
          SecGroupIds: !Ref MultusSecurityGroup
          useStaticIPs: !Ref useIPsFromStartOfSubnet
          ENITags: !Ref InterfaceTags
          SourceDestCheckEnable: !Ref SourceDestCheckEnable
# End of Lambda

# CloudWatch Event Trigger
  NewInstanceEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "EC2 Instance-launch Lifecycle Action"
        detail:
          AutoScalingGroupName:
            - !Ref AutoscalingGroupName
      Targets:
        -
          Arn: !GetAtt LambdaAttach2ndENI.Arn
          Id: LambdaAttach2ndENI
  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "LambdaAttach2ndENI"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "NewInstanceEventRule"
          - "Arn"

  LambdaReStartFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json
          import cfnresponse
          asg_client = boto3.client('autoscaling')
          ec2_client = boto3.client('ec2')

          def handler (event, context):
              AutoScalingGroupName = event['ResourceProperties']['AsgName']
              asg_response = asg_client.describe_auto_scaling_groups(AutoScalingGroupNames=[AutoScalingGroupName])
              instance_ids = []

              for i in asg_response['AutoScalingGroups']:
                for k in i['Instances']:
                  instance_ids.append(k['InstanceId'])

              if instance_ids != []:
                ec2_client.terminate_instances(
                  InstanceIds = instance_ids
                )
              responseValue = 1
              responseData = {}
              responseData['Data'] = responseValue
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

      Handler: index.handler
      Runtime: "python3.8"
      Timeout: "60"
      Role: !GetAtt RoleLambdaAttach2ndEniCfn.Arn

  AutoRebootNg1:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt 'LambdaReStartFunction.Arn'
      AsgName: !Ref AutoscalingGroupName

Outputs:  

  MultusSecurityGroup:
    Description: The security group for the Multus Interface
    Value: !Ref MultusSecurityGroup
